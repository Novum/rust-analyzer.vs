# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: CDP

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    branches: [master]

env:
  VsixFileName: RustAnalyzer.vsix
  SolutionPath: src\RustAnalyzer.sln
  VsixManifestPath: src\RustAnalyzer\source.extension.vsixmanifest
  VsixManifestSourcePath: src\RustAnalyzer\source.extension.cs
  TestAdapterNameNoExt: KS.RustAnalyzer.TestAdapter
  RUSTANALYZER_TELEMETRY_DISABLED: 1

jobs:
  build-test-deploy:
    outputs:
      version: ${{ steps.vsix_version.outputs.version-number }}
    name: Build, Test & Deploy
    runs-on: windows-2022
    env:
      Configuration: Release
      DeployExtension: False
      OutDir: \_built\

    steps:
    - uses: actions/checkout@v2

    - name: Setup .NET build dependencies
      uses: timheuer/bootstrap-dotnet@v1
      with:
        nuget: 'false'
        sdk: 'false'
        msbuild: 'true'

    - name: Increment VSIX version
      id: vsix_version
      uses: timheuer/vsix-version-stamp@v1
      with:
        manifest-file: ${{ env.VsixManifestPath }}
        vsix-token-source-file: ${{ env.VsixManifestSourcePath }}

    - name: Build
      run: msbuild $env:SolutionPath /m /t:rebuild /restore /p:OutDir=$env:OutDir

    - name: Zip TestAdapter
      run: |
        $files = @("${env:OutDir}${env:TestAdapterNameNoExt}.dll", "${env:OutDir}${env:TestAdapterNameNoExt}.pdb", "${env:OutDir}Microsoft.ApplicationInsights.dll", "${env:OutDir}Microsoft.ApplicationInsights.pdb")
        $dst = "${env:OutDir}${env:TestAdapterNameNoExt}.zip"
        Compress-Archive -Path $files -DestinationPath $dst
        # List contents for debugging purposes
        Add-Type -assembly "system.io.compression.filesystem"
        echo "listing files in zip..."
        [io.compression.zipfile]::OpenRead($dst).Entries.Name | % { "- $_"}
      shell: pwsh
      continue-on-error: true

    - name: Test
      uses: microsoft/vstest-action@v1.0.0
      with:
        testAssembly: '*.UnitTests.dll'
        searchFolder: '${{ env.OutDir }}'
        runInParallel: true
        resultLogsArtifactName: unit-tests-results-log
      continue-on-error: true

    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Tests Results
        path: TestResults/*.trx
        reporter: dotnet-trx
        fail-on-error: true

    - name: Upload VSIX
      uses: actions/upload-artifact@v3
      with:
        name: ${{ github.event.repository.name }}.zip
        path: ${{ env.OutDir }}${{ env.VsixFileName }}
        if-no-files-found: error

    - name: Upload TestAdapter
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.TestAdapterNameNoExt }}.zip
        path: ${{ env.OutDir }}${{ env.TestAdapterNameNoExt }}.zip
        if-no-files-found: warn

  run-integration-tests:
    name: Integration tests
    needs: build-test-deploy
    runs-on: windows-2022
    env:
      TestAdapterLocation: \testadapter

    steps:
    - uses: actions/checkout@v2

    - uses: darenm/Setup-VSTest@v1.2

    - name: Download TestAdapter
      id: itdownloadta
      uses: actions/download-artifact@v3
      with:
        name: ${{ env.TestAdapterNameNoExt }}.zip
      continue-on-error: true

    - name: Prepare for integration tests
      run: |
        $adapterPathNoExt = "${env:itdownloadta}\${env:TestAdapterNameNoExt}"
        mkdir $env:TestAdapterLocation
        Expand-Archive "${env:itdownloadta}\${env:TestAdapterNameNoExt}.zip" -DestinationPath $env:TestAdapterLocation
      shell: pwsh
      env:
        itdownloadta: ${{ steps.itdownloadta.outputs.download-path }}
      continue-on-error: true

    - name: Run integration tests
      run: |
        vstest.console.exe .\src\TestProjects\workspace_with_tests\adder\Cargo.toml .\src\TestProjects\workspace_with_tests\add_one\Cargo.toml .\src\TestProjects\workspace_with_tests\Cargo.toml /TestAdapterPath:"$env:TestAdapterLocation" /Parallel "/logger:console;verbosity=detailed" "/logger:trx;LogFileName=$env:TestAdapterNameNoExt.trx"

        # Check results
        $trx = ".\TestResults\$env:TestAdapterNameNoExt.trx"
        $xml = [xml] (gc $trx)
        $output = ($xml.TestRun.Results.UnitTestResult | Sort-Object -Property testName | % { "$($_.testName)=>$($_.outcome)" }) -join "; "
        echo ">>>> $output"
        if ($output -cne 'tests.it_works_failing=>Failed; tests.it_works_passing=>Passed; tests.it_works_skipped=>Passed')
        {
          throw "test failed"
        }
      shell: pwsh
      continue-on-error: true

    - name: Generate integration test report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Integration Tests Results
        path: TestResults/*${{ env.TestAdapterNameNoExt }}.trx
        reporter: dotnet-trx
        fail-on-error: true
      continue-on-error: true

  publish:
    name: Publish
    if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
    needs: run-integration-tests
    runs-on: windows-2022

    steps:
      - uses: actions/checkout@v2

      - name: Download VSIX
        id: downloadvx
        uses: actions/download-artifact@v3
        with:
          name: ${{ github.event.repository.name }}.zip

      - name: Download TestAdapter
        id: downloadta
        uses: actions/download-artifact@v3
        with:
          name: ${{ env.TestAdapterNameNoExt }}.zip

      - name: Upload to Open VSIX
        uses: timheuer/openvsixpublish@v1
        with:
          vsix-file: '${{ steps.downloadvx.outputs.download-path }}\\${{ env.VsixFileName }}'

      - name: Tag and Release
        if: ${{ github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.message, '[release]') }}
        id: tag_release
        uses: softprops/action-gh-release@v0.1.15
        with:
          generate_release_notes: true
          tag_name: ${{ needs.build-test-deploy.outputs.version }}
          name: Release ${{ needs.build-test-deploy.outputs.version }}
          files: |
            '${{ steps.downloadvx.outputs.download-path }}\\${{ env.VsixFileName }}'
            '${{ steps.downloadta.outputs.download-path }}\\${{ env.TestAdapterNameNoExt }}.zip'

      - name: Publish extension to Marketplace
        if: ${{ github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.message, '[release]') }}
        uses: cezarypiatek/VsixPublisherAction@0.1
        with:
          extension-file: '${{ steps.downloadvx.outputs.download-path }}\\${{ env.VsixFileName }}'
          publish-manifest-file: 'vs-publish.json'
          personal-access-code: ${{ secrets.VS_PUBLISHER_ACCESS_TOKEN }}
